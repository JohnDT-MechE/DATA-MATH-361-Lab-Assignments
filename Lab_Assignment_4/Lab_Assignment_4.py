### Lab Assignment 4
### John Dominguez-Trujillo

### Activity 1

## IMPORTS ESSENTIAL LIBRARIES
## NUMPY IS A PYTHON LIBRARY THAT ADDS SUPPORT FOR USING AND HANDLING MULTI-DIMENSIONAL ARRAYS AND MATRICES AND ALLOWS FOR HIHG-LEVEL MATHEMATICAL FUNCTIONS TO BE PERFORMED ON THESE ARRAYS/MATRICES
## MATPLOTLIB IS A PLOTTING LIBRARY THAT PROVIDES AN OBJECT-OREINTED API FOR DISPLAYING PLOTS
## SCIPY.STATS IS A SCIPY LIBRARY THAT PROVIDES VARIOUS STATISTICAL FUNCTIONS SUCH AS PROBABILITY DISTRIBUTIONS, STATISTICAL TESTS, AND DESCRIPTIVE STATISTICS
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

## SETS GIVEN MEAN AND STANDARD DEVIATION TO DEFINE NORMAL DISTRIBUTION IN MPH
mean = 66
std_dev = 2

## DEFINES THE GREATER THAN AND LESS THAN SPEED VALUES FOR PROBABILITY CALCULATIONS IN MPH
greater_than_speed = 70
less_than_speed = 60

## CREATES THE X-AXIS BY CREATING AN ARRAY OF 1000 EVENLY SPACED NUMBERS FROM 4 STANDARD DEVIATIONS BELOW THE MEAN TO 4 STANDARD DEVIATIONS ABOVE THE MEAN
## IN THIS CASE THE ARRAY WILL HAVE 1000 EVENLY SPACED NUMBERS FROM 58 TO 74
x = np.linspace(mean - 4 * std_dev, mean + 4 * std_dev, 1000)

## COMPUTES THE PROBABILITY DENSITY FUNCTION FOR EACH X FOR GIVEN NORMAL DISTRIBUTION
y = stats.norm.pdf(x, mean, std_dev)

## CALCULATES PROBABILITY OF SPEED BEING GREATER THAN DEFINED GREATER THAN SPEED
## SUBTRACTS STATS.NORM.CDF FROM 1 DUE TO THE WAY THE FUNCTION WORKS
## STATS.NORM.CDF GETS PROBABILTIY THAT VALUE LIES BETWEEN -INFINITY AND SPECIFIED VALUE (LEFT SIDE OF VALUE) A.K.A. PROBABILITY THAT SPEED IS LESS THAN OR EQUAL TO SPECIFIED VALUE
## SUBTRACT FROM 1 TO GET THE RIGHT SIDE A.K.A. PROBABILITY THAT THE SPEED IS GREATER THAN OR EQUAL TO SPECIFIED VALUE
prob_greater_than = 1 - stats.norm.cdf(greater_than_speed, mean, std_dev)

## CALCULATES PROBABILITY OF SPEED BEING LESS THAN DEFINED LESS THAN SPEED
prob_less_than = stats.norm.cdf(less_than_speed, mean, std_dev)

## CREATES A FIGURE AND DEFINES SIZE
plt.figure(figsize = (8, 5))

## PLOTS X AND Y VALUES ON FIGURE, LABELS THE PLOTTED DATA, SETS COLOR TO BLUE
plt.plot(x, y, label = 'Normal Distribution of Speed', color = 'blue')

## CREATES AN ARRAY OF 500 EVENLY SPACED NUMBERS BETWEEN THE GREATER_THAN_SPEED AND 4 STANDARD DEVIATIONS ABOVE THE MEAN
x_fill_greater = np.linspace(greater_than_speed, mean + 4 * std_dev, 500)

## CALCULATES THE PROBABILITY DENSITY FUNCTION (HEIGHT OF THE NORMAL CURVE) AT EACH X_FILL_GREATER VALUE
y_fill_greater = stats.norm.pdf(x_fill_greater, mean, std_dev)

## SHADES THE AREA BETWEEN X_FILL_GREATER AND THE PDF CURVE
## ALPHA CONTROLS THE TRANSPARENCY AND COLOR SETS THE COLOR AS RED AND LABEL ALLOWS FOR THE AREA TO BE LABELED IN THE LEGEND
plt.fill_between(x_fill_greater, y_fill_greater, alpha = 0.5, color = 'red', label = f'P(X > {greater_than_speed}) = {prob_greater_than:.4f}')

## CREATES AN ARRAY OF 500 EVENLY SPACED NUMBERS BETWEEN THE LESS_THAN_SPEED AND 4 STANDARD DEVIATIONS BELOW THE MEAN
x_fill_less = np.linspace(mean - 4 * std_dev, less_than_speed, 500)

## CALCULATES THE PROBABILITY DENSITY FUNCTION (HEIGHT OF THE NORMAL CURVE) AT EACH X_FILL_LESS VALUE
y_fill_less = stats.norm.pdf(x_fill_less, mean, std_dev)

## SHADES THE AREA BETWEEN X_FILL_LESS AND THE PDF CURVE
## ALPHA CONTROLS THE TRANSPARENCY AND COLOR SETS THE COLOR AS GREEN AND LABEL ALLOWS FOR THE AREA TO BE LABELED IN THE LEGEND
plt.fill_between(x_fill_less, y_fill_less, alpha = 0.5, color = 'green', label = f'P(X < {less_than_speed}) = {prob_less_than:.4f}')

## ADDS A VERTICAL LINE AT THE DEFINED GREATER_THAN_SPEED, SETS THE COLOR TO RED, SETS THE LINETYPE TO DASHED, AND ADDS A LABEL TO BE INCLUDED IN THE LEGEND
plt.axvline(greater_than_speed, color = 'red', linestyle = 'dashed', label = f'X = {greater_than_speed}')

## ADDS A VERTICAL LINE AT THE DEFINED LESS_THAN_SPEED, SETS THE COLOR TO GREEN, SETS THE LINETYPE TO DASHED, AND ADDS A LABEL TO BE INCLUDED IN THE LEGEND
plt.axvline(less_than_speed, color = 'green', linestyle = 'dashed', label = f'X = {less_than_speed}')

## ADDS A TITLE TO PLOT AND LABELS THE X AND Y AXIS OF THE PLOT
plt.xlabel('Speed (mph)')
plt.ylabel('Probability Density')
plt.title('Normal Distribution of Speed with Probabilities')

## ADDS A LEGEND TO THE FIGURE
plt.legend()

## ADDS A GRID TO THE FIGURE
plt.grid()

## SHOWS THE PLOT IN THE FIGURE
plt.show()

## PRINTS THE CALCULATED PROBABILITIES TO THE OUTPUT TERMINAL, LIMITS PROBABILITY VALUES TO HAVE ONLY 4 DECIMAL DIGITS
print(f'Probability of speed > {greater_than_speed} mph: {prob_greater_than:.4f}')
print(f'Probabiltiy of speed < {less_than_speed} mph: {prob_less_than:.4f}')


### Activity 2

## IMPORTS ESSENTIAL LIBRARIES
## NUMPY IS A PYTHON LIBRARY THAT ADDS SUPPORT FOR USING AND HANDLING MULTI-DIMENSIONAL ARRAYS AND MATRICES AND ALLOWS FOR HIHG-LEVEL MATHEMATICAL FUNCTIONS TO BE PERFORMED ON THESE ARRAYS/MATRICES
## MATPLOTLIB IS A PLOTTING LIBRARY THAT PROVIDES AN OBJECT-OREINTED API FOR DISPLAYING PLOTS
## SCIPY.STATS IS A SCIPY LIBRARY THAT PROVIDES VARIOUS STATISTICAL FUNCTIONS SUCH AS PROBABILITY DISTRIBUTIONS, STATISTICAL TESTS, AND DESCRIPTIVE STATISTICS
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

## SETS GIVEN MEAN AND STANDARD DEVIATION TO DEFINE NORMAL DISTRIBUTION IN MPH
mean_speed = 66  # mph
std_dev = 2  # mph

## DEFINES THE GREATER THAN AND LESS THAN SPEED VALUES FOR PROBABILITY CALCULATIONS IN MPH
greater_than_speed = 70
less_than_speed = 60

## CALCULATES PROBABILITY OF SPEED BEING GREATER THAN DEFINED GREATER THAN SPEED
## SUBTRACTS STATS.NORM.CDF FROM 1 DUE TO THE WAY THE FUNCTION WORKS
## STATS.NORM.CDF GETS PROBABILTIY THAT VALUE LIES BETWEEN -INFINITY AND SPECIFIED VALUE (LEFT SIDE OF VALUE) A.K.A. PROBABILITY THAT SPEED IS LESS THAN OR EQUAL TO SPECIFIED VALUE
## SUBTRACT FROM 1 TO GET THE RIGHT SIDE A.K.A. PROBABILITY THAT THE SPEED IS GREATER THAN OR EQUAL TO SPECIFIED VALUE
prob_greater_than = 1 - stats.norm.cdf(greater_than_speed, mean_speed, std_dev)

## CALCULATES PROBABILITY OF SPEED BEING LESS THAN DEFINED LESS THAN SPEED
prob_less_than = stats.norm.cdf(less_than_speed, mean_speed, std_dev)

## CREATES THE X-AXIS BY CREATING AN ARRAY OF 1000 EVENLY SPACED NUMBERS FROM 4 STANDARD DEVIATIONS BELOW THE MEAN TO 4 STANDARD DEVIATIONS ABOVE THE MEAN
## IN THIS CASE THE ARRAY WILL HAVE 1000 EVENLY SPACED NUMBERS FROM 58 TO 74
x_cdf = np.linspace(mean_speed - 4 * std_dev, mean_speed + 4 * std_dev, 1000)

## COMPUTES THE CUMULATIVE DENSITY FUNCTION FOR EACH X_CDF FOR GIVEN DISTRIBUTION
y_cdf = stats.norm.cdf(x_cdf, mean_speed, std_dev)

## CREATES A FIGURE AND DEFINES SIZE
plt.figure(figsize=(8, 5))

## PLOTS X_CDF AND Y_CDF VALUES ON FIGURE, LABELS THE PLOTTED DATA, SETS COLOR TO BLUE
plt.plot(x_cdf, y_cdf, label="Cumulative Distribution Function", color='blue')

## ADDS A VERTICAL LINE AT THE DEFINED GREATER_THAN_SPEED, SETS THE COLOR TO RED, SETS THE LINETYPE TO DASHED, AND ADDS A LABEL TO BE INCLUDED IN THE LEGEND
plt.axvline(greater_than_speed, color='red', linestyle='dashed', label=f'X = {greater_than_speed}')

## PLOTS A POINT AT (X,Y) WHERE X IS THE GREATER_THAN_SPEED AND Y IS THE CALCULATED CDF AT THE DEFINED GREATER_THAN_SPEED GIVEN THE DISTRIBUTION
## COLOR SETS THE COLOR AS RED AND ZORDER ENSURES THAT THE POINT IS DRAWN ABOVE OTHER PLOT ELEMENTS
plt.scatter(greater_than_speed, stats.norm.cdf(greater_than_speed, mean_speed, std_dev), color='red', zorder=3)

## ADDS A LABEL NEXT TO THE POINT ON THE PLOT AT (X,Y) WHERE X IS THE GREATER_THAN_SPEED AND Y IS 0.05 LESS THAN THE CALCULATED CDF AT THE DEFINED GREATER_THAN_SPEED TO ENSURE THE TEXT IS SLIGHTLY LOWER FOR BETTER VISIBILITY
## THE REST OF THE INPUTS INTO THE FUNCTION ADDS THE NECESSARY TEXT FOR THE LABEL AND SETS THE COLOR TO RED AND ALIGNS THE TEXT TO THE RIGHT FOR BETTER READABILITY
plt.text(greater_than_speed, stats.norm.cdf(greater_than_speed, mean_speed, std_dev) - 0.05,
         f'P(X > {greater_than_speed}) = {prob_greater_than:.4f}', color='red', ha='right')

## ADDS A VERTICAL LINE AT THE DEFINED LESS_THAN_SPEED, SETS THE COLOR TO GREEN, SETS THE LINETYPE TO DASHED, AND ADDS A LABEL TO BE INCLUDED IN THE LEGEND
plt.axvline(less_than_speed, color='green', linestyle='dashed', label=f'X = {less_than_speed}')

## PLOTS A POINT AT (X,Y) WHERE X IS THE LESS_THAN_SPEED AND Y IS THE CALCULATED CDF AT THE DEFINED LESS_THAN_SPEED GIVEN THE DISTRIBUTION
## COLOR SETS THE COLOR AS GREEN AND ZORDER ENSURES THAT THE POINT IS DRAWN ABOVE OTHER PLOT ELEMENTS
plt.scatter(less_than_speed, stats.norm.cdf(less_than_speed, mean_speed, std_dev), color='green', zorder=3)

## ADDS A LABEL NEXT TO THE POINT ON THE PLOT AT (X,Y) WHERE X IS THE LESS_THAN_SPEED AND Y IS 0.05 LESS THAN THE CALCULATED CDF AT THE DEFINED LESS_THAN_SPEED TO ENSURE THE TEXT IS SLIGHTLY LOWER FOR BETTER VISIBILITY
## THE REST OF THE INPUTS INTO THE FUNCTION ADDS THE NECESSARY TEXT FOR THE LABEL AND SETS THE COLOR TO GREEN AND ALIGNS THE TEXT TO THE RIGHT FOR BETTER READABILITY
plt.text(less_than_speed, stats.norm.cdf(less_than_speed, mean_speed, std_dev) + 0.02,
         f'P(X < {less_than_speed}) = {prob_less_than:.4f}', color='green', ha='right')

## ADDS A TITLE TO PLOT AND LABELS THE X AND Y AXIS OF THE PLOT
plt.xlabel("Speed (mph)")
plt.ylabel("Cumulative Probability")
plt.title("Cumulative Distribution Function (CDF) of Speed")

## ADDS A LEGEND TO THE FIGURE
plt.legend()

## ADDS A GRID TO THE FIGURE
plt.grid()

## SHOWS THE PLOT IN THE FIGURE
plt.show()

## PRINTS THE CALCULATED PROBABILITIES TO THE OUTPUT TERMINAL, LIMITS PROBABILITY VALUES TO HAVE ONLY 4 DECIMAL DIGITS
print(f"Probability of speed > {greater_than_speed} mph: {prob_greater_than:.4f}")
print(f"Probability of speed < {less_than_speed} mph: {prob_less_than:.4f}")
